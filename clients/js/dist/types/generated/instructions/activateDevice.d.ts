/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */
import { Address, Codec, Decoder, Encoder, IAccountMeta, IAccountSignerMeta, IInstruction, IInstructionWithAccounts, IInstructionWithData, ReadonlyAccount, TransactionSigner, WritableAccount, WritableSignerAccount } from '@solana/web3.js';
import { DEPHY_ID_PROGRAM_ADDRESS } from '../programs';
import { DeviceActivationSignature, DeviceActivationSignatureArgs } from '../types';
export type ActivateDeviceInstruction<TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountToken2022Program extends string | IAccountMeta<string> = string, TAccountAtaProgram extends string | IAccountMeta<string> = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL', TAccountInstructions extends string | IAccountMeta<string> = string, TAccountPayer extends string | IAccountMeta<string> = string, TAccountVendor extends string | IAccountMeta<string> = string, TAccountProductMint extends string | IAccountMeta<string> = string, TAccountProductAssociatedToken extends string | IAccountMeta<string> = string, TAccountDevice extends string | IAccountMeta<string> = string, TAccountDeviceMint extends string | IAccountMeta<string> = string, TAccountDeviceAssociatedToken extends string | IAccountMeta<string> = string, TAccountOwner extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountToken2022Program extends string ? ReadonlyAccount<TAccountToken2022Program> : TAccountToken2022Program,
    TAccountAtaProgram extends string ? ReadonlyAccount<TAccountAtaProgram> : TAccountAtaProgram,
    TAccountInstructions extends string ? ReadonlyAccount<TAccountInstructions> : TAccountInstructions,
    TAccountPayer extends string ? WritableSignerAccount<TAccountPayer> & IAccountSignerMeta<TAccountPayer> : TAccountPayer,
    TAccountVendor extends string ? ReadonlyAccount<TAccountVendor> : TAccountVendor,
    TAccountProductMint extends string ? ReadonlyAccount<TAccountProductMint> : TAccountProductMint,
    TAccountProductAssociatedToken extends string ? ReadonlyAccount<TAccountProductAssociatedToken> : TAccountProductAssociatedToken,
    TAccountDevice extends string ? ReadonlyAccount<TAccountDevice> : TAccountDevice,
    TAccountDeviceMint extends string ? WritableAccount<TAccountDeviceMint> : TAccountDeviceMint,
    TAccountDeviceAssociatedToken extends string ? WritableAccount<TAccountDeviceAssociatedToken> : TAccountDeviceAssociatedToken,
    TAccountOwner extends string ? ReadonlyAccount<TAccountOwner> : TAccountOwner,
    ...TRemainingAccounts
]>;
export type ActivateDeviceInstructionData = {
    discriminator: number;
    signature: DeviceActivationSignature;
    messageSlot: bigint;
};
export type ActivateDeviceInstructionDataArgs = {
    signature: DeviceActivationSignatureArgs;
    messageSlot: number | bigint;
};
export declare function getActivateDeviceInstructionDataEncoder(): Encoder<ActivateDeviceInstructionDataArgs>;
export declare function getActivateDeviceInstructionDataDecoder(): Decoder<ActivateDeviceInstructionData>;
export declare function getActivateDeviceInstructionDataCodec(): Codec<ActivateDeviceInstructionDataArgs, ActivateDeviceInstructionData>;
export type ActivateDeviceInput<TAccountSystemProgram extends string = string, TAccountToken2022Program extends string = string, TAccountAtaProgram extends string = string, TAccountInstructions extends string = string, TAccountPayer extends string = string, TAccountVendor extends string = string, TAccountProductMint extends string = string, TAccountProductAssociatedToken extends string = string, TAccountDevice extends string = string, TAccountDeviceMint extends string = string, TAccountDeviceAssociatedToken extends string = string, TAccountOwner extends string = string> = {
    /** The system program */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The SPL Token 2022 program */
    token2022Program: Address<TAccountToken2022Program>;
    /** The associated token program */
    ataProgram?: Address<TAccountAtaProgram>;
    /** The instructions sysvar */
    instructions: Address<TAccountInstructions>;
    /** The account paying for the storage fees */
    payer: TransactionSigner<TAccountPayer>;
    /** The vendor */
    vendor: Address<TAccountVendor>;
    /** The mint account for the product */
    productMint: Address<TAccountProductMint>;
    /** The associated token account for the product */
    productAssociatedToken: Address<TAccountProductAssociatedToken>;
    /** The device */
    device: Address<TAccountDevice>;
    /** The mint account for the device */
    deviceMint: Address<TAccountDeviceMint>;
    /** The associated token account for the device */
    deviceAssociatedToken: Address<TAccountDeviceAssociatedToken>;
    /** The device's owner */
    owner: Address<TAccountOwner>;
    signature: ActivateDeviceInstructionDataArgs['signature'];
    messageSlot: ActivateDeviceInstructionDataArgs['messageSlot'];
};
export declare function getActivateDeviceInstruction<TAccountSystemProgram extends string, TAccountToken2022Program extends string, TAccountAtaProgram extends string, TAccountInstructions extends string, TAccountPayer extends string, TAccountVendor extends string, TAccountProductMint extends string, TAccountProductAssociatedToken extends string, TAccountDevice extends string, TAccountDeviceMint extends string, TAccountDeviceAssociatedToken extends string, TAccountOwner extends string>(input: ActivateDeviceInput<TAccountSystemProgram, TAccountToken2022Program, TAccountAtaProgram, TAccountInstructions, TAccountPayer, TAccountVendor, TAccountProductMint, TAccountProductAssociatedToken, TAccountDevice, TAccountDeviceMint, TAccountDeviceAssociatedToken, TAccountOwner>): ActivateDeviceInstruction<typeof DEPHY_ID_PROGRAM_ADDRESS, TAccountSystemProgram, TAccountToken2022Program, TAccountAtaProgram, TAccountInstructions, TAccountPayer, TAccountVendor, TAccountProductMint, TAccountProductAssociatedToken, TAccountDevice, TAccountDeviceMint, TAccountDeviceAssociatedToken, TAccountOwner>;
export type ParsedActivateDeviceInstruction<TProgram extends string = typeof DEPHY_ID_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The system program */
        systemProgram: TAccountMetas[0];
        /** The SPL Token 2022 program */
        token2022Program: TAccountMetas[1];
        /** The associated token program */
        ataProgram: TAccountMetas[2];
        /** The instructions sysvar */
        instructions: TAccountMetas[3];
        /** The account paying for the storage fees */
        payer: TAccountMetas[4];
        /** The vendor */
        vendor: TAccountMetas[5];
        /** The mint account for the product */
        productMint: TAccountMetas[6];
        /** The associated token account for the product */
        productAssociatedToken: TAccountMetas[7];
        /** The device */
        device: TAccountMetas[8];
        /** The mint account for the device */
        deviceMint: TAccountMetas[9];
        /** The associated token account for the device */
        deviceAssociatedToken: TAccountMetas[10];
        /** The device's owner */
        owner: TAccountMetas[11];
    };
    data: ActivateDeviceInstructionData;
};
export declare function parseActivateDeviceInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedActivateDeviceInstruction<TProgram, TAccountMetas>;
//# sourceMappingURL=activateDevice.d.ts.map