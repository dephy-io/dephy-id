{"version":3,"sources":["../../env-shim.ts","../../test/increment.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Clever obfuscation to prevent the build system from inlining the value of `NODE_ENV`\nexport const __DEV__ = /* @__PURE__ */ (() =>\n  (process as any)['en' + 'v'].NODE_ENV === 'development')();\n","import {\n  SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE,\n  appendTransactionMessageInstruction,\n  isProgramError,\n  isSolanaError,\n  lamports,\n  pipe,\n} from '@solana/web3.js';\nimport test from 'ava';\nimport {\n  DEPHY_ID_ERROR__INVALID_PDA,\n  DEPHY_ID_ERROR__INVALID_PROGRAM_OWNER,\n  DEPHY_ID_PROGRAM_ADDRESS,\n  fetchCounter,\n  findCounterPda,\n  getIncrementInstruction,\n  getIncrementInstructionAsync,\n} from '../src';\nimport {\n  createCounterForAuthority,\n  createDefaultSolanaClient,\n  createDefaultTransaction,\n  generateKeyPairSignerWithSol,\n  getBalance,\n  signAndSendTransaction,\n} from './_setup';\n\ntest('it increments an existing counter by 1 by default', async (t) => {\n  // Given an authority key pair with an associated counter account of value 0.\n  const client = createDefaultSolanaClient();\n  const authority = await generateKeyPairSignerWithSol(client);\n  const [counterPda] = await createCounterForAuthority(client, authority);\n  t.is((await fetchCounter(client.rpc, counterPda)).data.value, 0);\n\n  // When we increment the counter account.\n  const incrementIx = await getIncrementInstructionAsync({ authority });\n  await pipe(\n    await createDefaultTransaction(client, authority),\n    (tx) => appendTransactionMessageInstruction(incrementIx, tx),\n    (tx) => signAndSendTransaction(client, tx)\n  );\n\n  // Then we expect the counter account to have a value of 1.\n  const counter = await fetchCounter(client.rpc, counterPda);\n  t.is(counter.data.value, 1);\n});\n\ntest('it can increment an existing counter by a specified amount', async (t) => {\n  // Given an authority key pair with an associated counter account of value 0.\n  const client = createDefaultSolanaClient();\n  const authority = await generateKeyPairSignerWithSol(client);\n  const [counterPda] = await createCounterForAuthority(client, authority);\n  t.is((await fetchCounter(client.rpc, counterPda)).data.value, 0);\n\n  // When we increment the counter account by 5.\n  const incrementIx = await getIncrementInstructionAsync({\n    authority,\n    amount: 5,\n  });\n  await pipe(\n    await createDefaultTransaction(client, authority),\n    (tx) => appendTransactionMessageInstruction(incrementIx, tx),\n    (tx) => signAndSendTransaction(client, tx)\n  );\n\n  // Then we expect the counter account to have a value of 5.\n  const counter = await fetchCounter(client.rpc, counterPda);\n  t.is(counter.data.value, 5);\n});\n\ntest('it cannot increment a counter that does not exist', async (t) => {\n  // Given an authority key pair with no associated counter account.\n  const client = createDefaultSolanaClient();\n  const authority = await generateKeyPairSignerWithSol(client);\n  const [counterPda] = await findCounterPda({ authority: authority.address });\n  t.is(await getBalance(client, counterPda), lamports(0n));\n\n  // When we try to increment the inexistent counter account.\n  const incrementIx = await getIncrementInstructionAsync({ authority });\n  const transactionMessage = pipe(\n    await createDefaultTransaction(client, authority),\n    (tx) => appendTransactionMessageInstruction(incrementIx, tx)\n  );\n  const promise = signAndSendTransaction(client, transactionMessage);\n\n  // Then we expect the program to throw an error.\n  const error = await t.throwsAsync(promise);\n  t.true(\n    isSolanaError(\n      error,\n      SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE\n    )\n  );\n  t.true(\n    isProgramError(\n      error.cause,\n      transactionMessage,\n      DEPHY_ID_PROGRAM_ADDRESS,\n      DEPHY_ID_ERROR__INVALID_PROGRAM_OWNER\n    )\n  );\n});\n\ntest('it cannot increment a counter that belongs to another authority', async (t) => {\n  // Given two authority key pairs such that\n  // only one of them (authority A) is associated with a counter account.\n  const client = createDefaultSolanaClient();\n  const [authorityA, authorityB] = await Promise.all([\n    generateKeyPairSignerWithSol(client),\n    generateKeyPairSignerWithSol(client),\n  ]);\n  const [counterPda] = await createCounterForAuthority(client, authorityA);\n\n  // When authority B tries to increment the counter account of authority A.\n  const incrementIx = getIncrementInstruction({\n    authority: authorityB,\n    counter: counterPda,\n  });\n  const transactionMessage = pipe(\n    await createDefaultTransaction(client, authorityB),\n    (tx) => appendTransactionMessageInstruction(incrementIx, tx)\n  );\n  const promise = signAndSendTransaction(client, transactionMessage);\n\n  // Then we expect the program to throw an error.\n  const error = await t.throwsAsync(promise);\n  t.true(\n    isSolanaError(\n      error,\n      SOLANA_ERROR__JSON_RPC__SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE\n    )\n  );\n  t.true(\n    isProgramError(\n      error.cause,\n      transactionMessage,\n      DEPHY_ID_PROGRAM_ADDRESS,\n      DEPHY_ID_ERROR__INVALID_PDA\n    )\n  );\n});\n"]}