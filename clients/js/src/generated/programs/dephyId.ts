/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  DephyIdProgramError,
  DephyIdProgramErrorCode,
  getDephyIdProgramErrorFromCode,
} from '../errors';
import {
  ParsedCreateInstruction,
  ParsedIncrementInstruction,
} from '../instructions';
import { memcmp } from '../shared';
import { Key, getKeyEncoder } from '../types';

export const DEPHY_ID_PROGRAM_ADDRESS =
  'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>;

export type DephyIdProgram =
  Program<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'> &
    ProgramWithErrors<DephyIdProgramErrorCode, DephyIdProgramError>;

export function getDephyIdProgram(): DephyIdProgram {
  return {
    name: 'dephyId',
    address: DEPHY_ID_PROGRAM_ADDRESS,
    getErrorFromCode(code: DephyIdProgramErrorCode, cause?: Error) {
      return getDephyIdProgramErrorFromCode(code, cause);
    },
  };
}

export enum DephyIdAccount {
  Counter,
}

export function identifyDephyIdAccount(
  account: { data: Uint8Array } | Uint8Array
): DephyIdAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, getKeyEncoder().encode(Key.Counter), 0)) {
    return DephyIdAccount.Counter;
  }
  throw new Error(
    'The provided account could not be identified as a dephyId account.'
  );
}

export enum DephyIdInstruction {
  Create,
  Increment,
}

export function identifyDephyIdInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): DephyIdInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return DephyIdInstruction.Create;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return DephyIdInstruction.Increment;
  }
  throw new Error(
    'The provided instruction could not be identified as a dephyId instruction.'
  );
}

export type ParsedDephyIdInstruction<
  TProgram extends string = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1',
> =
  | ({
      instructionType: DephyIdInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: DephyIdInstruction.Increment;
    } & ParsedIncrementInstruction<TProgram>);
