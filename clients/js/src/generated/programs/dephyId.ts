/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU8Encoder } from '@solana/codecs';
import { Program, ProgramWithErrors } from '@solana/programs';
import {
  DephyIdProgramError,
  DephyIdProgramErrorCode,
  getDephyIdProgramErrorFromCode,
} from '../errors';
import {
  ParsedActivateDeviceInstruction,
  ParsedCreateDephyInstruction,
  ParsedCreateDeviceInstruction,
  ParsedCreateProductInstruction,
  ParsedCreateVendorInstruction,
} from '../instructions';
import { memcmp } from '../shared';

export const DEPHY_ID_PROGRAM_ADDRESS =
  'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1' as Address<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'>;

export type DephyIdProgram =
  Program<'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1'> &
    ProgramWithErrors<DephyIdProgramErrorCode, DephyIdProgramError>;

export function getDephyIdProgram(): DephyIdProgram {
  return {
    name: 'dephyId',
    address: DEPHY_ID_PROGRAM_ADDRESS,
    getErrorFromCode(code: DephyIdProgramErrorCode, cause?: Error) {
      return getDephyIdProgramErrorFromCode(code, cause);
    },
  };
}

export enum DephyIdAccount {
  DephyAccount,
}

export enum DephyIdInstruction {
  CreateDephy,
  CreateVendor,
  CreateProduct,
  CreateDevice,
  ActivateDevice,
}

export function identifyDephyIdInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): DephyIdInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU8Encoder().encode(0), 0)) {
    return DephyIdInstruction.CreateDephy;
  }
  if (memcmp(data, getU8Encoder().encode(1), 0)) {
    return DephyIdInstruction.CreateVendor;
  }
  if (memcmp(data, getU8Encoder().encode(2), 0)) {
    return DephyIdInstruction.CreateProduct;
  }
  if (memcmp(data, getU8Encoder().encode(3), 0)) {
    return DephyIdInstruction.CreateDevice;
  }
  if (memcmp(data, getU8Encoder().encode(4), 0)) {
    return DephyIdInstruction.ActivateDevice;
  }
  throw new Error(
    'The provided instruction could not be identified as a dephyId instruction.'
  );
}

export type ParsedDephyIdInstruction<
  TProgram extends string = 'hdMghjD73uASxgJXi6e1mGPsXqnADMsrqB1bveqABP1',
> =
  | ({
      instructionType: DephyIdInstruction.CreateDephy;
    } & ParsedCreateDephyInstruction<TProgram>)
  | ({
      instructionType: DephyIdInstruction.CreateVendor;
    } & ParsedCreateVendorInstruction<TProgram>)
  | ({
      instructionType: DephyIdInstruction.CreateProduct;
    } & ParsedCreateProductInstruction<TProgram>)
  | ({
      instructionType: DephyIdInstruction.CreateDevice;
    } & ParsedCreateDeviceInstruction<TProgram>)
  | ({
      instructionType: DephyIdInstruction.ActivateDevice;
    } & ParsedActivateDeviceInstruction<TProgram>);
