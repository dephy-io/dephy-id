/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Account,
  EncodedAccount,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
} from '@solana/accounts';
import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs';
import {
  DephyData,
  DephyDataArgs,
  Key,
  KeyArgs,
  getDephyDataDecoder,
  getDephyDataEncoder,
  getKeyDecoder,
  getKeyEncoder,
} from '../types';

export type DephyAccount<TAddress extends string = string> = Account<
  DephyAccountAccountData,
  TAddress
>;

export type MaybeDephyAccount<TAddress extends string = string> = MaybeAccount<
  DephyAccountAccountData,
  TAddress
>;

export type DephyAccountAccountData = {
  key: Key;
  authority: Address;
  data: DephyData;
};

export type DephyAccountAccountDataArgs = {
  key: KeyArgs;
  authority: Address;
  data: DephyDataArgs;
};

export function getDephyAccountAccountDataEncoder(): Encoder<DephyAccountAccountDataArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['data', getDephyDataEncoder()],
  ]);
}

export function getDephyAccountAccountDataDecoder(): Decoder<DephyAccountAccountData> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getDephyDataDecoder()],
  ]);
}

export function getDephyAccountAccountDataCodec(): Codec<
  DephyAccountAccountDataArgs,
  DephyAccountAccountData
> {
  return combineCodec(
    getDephyAccountAccountDataEncoder(),
    getDephyAccountAccountDataDecoder()
  );
}

export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): DephyAccount<TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeDephyAccount<TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): DephyAccount<TAddress> | MaybeDephyAccount<TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDephyAccountAccountDataDecoder()
  );
}

export async function fetchDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<DephyAccount<TAddress>> {
  const maybeAccount = await fetchMaybeDephyAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeDephyAccount<TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDephyAccount(maybeAccount);
}

export async function fetchAllDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<DephyAccount[]> {
  const maybeAccounts = await fetchAllMaybeDephyAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeDephyAccount[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDephyAccount(maybeAccount));
}

export function getDephyAccountSize(): number {
  return 34;
}
