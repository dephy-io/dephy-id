/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
} from '@solana/web3.js';
import { findDephyAccountPda } from '../pdas';
import {
  DephyData,
  DephyDataArgs,
  Key,
  getDephyDataDecoder,
  getDephyDataEncoder,
  getKeyDecoder,
  getKeyEncoder,
} from '../types';

export type DephyAccount = { key: Key; authority: Address; data: DephyData };

export type DephyAccountArgs = { authority: Address; data: DephyDataArgs };

export function getDephyAccountEncoder(): Encoder<DephyAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['authority', getAddressEncoder()],
      ['data', getDephyDataEncoder()],
    ]),
    (value) => ({ ...value, key: Key.DephyAccount })
  );
}

export function getDephyAccountDecoder(): Decoder<DephyAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getDephyDataDecoder()],
  ]);
}

export function getDephyAccountCodec(): Codec<DephyAccountArgs, DephyAccount> {
  return combineCodec(getDephyAccountEncoder(), getDephyAccountDecoder());
}

export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<DephyAccount, TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<DephyAccount, TAddress>;
export function decodeDephyAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<DephyAccount, TAddress> | MaybeAccount<DephyAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getDephyAccountDecoder()
  );
}

export async function fetchDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<DephyAccount, TAddress>> {
  const maybeAccount = await fetchMaybeDephyAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDephyAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<DephyAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeDephyAccount(maybeAccount);
}

export async function fetchAllDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<DephyAccount>[]> {
  const maybeAccounts = await fetchAllMaybeDephyAccount(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeDephyAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<DephyAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeDephyAccount(maybeAccount));
}

export function getDephyAccountSize(): number {
  return 34;
}

export async function fetchDephyAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<DephyAccount>> {
  const maybeAccount = await fetchMaybeDephyAccountFromSeeds(rpc, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeDephyAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<DephyAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findDephyAccountPda({ programAddress });
  return await fetchMaybeDephyAccount(rpc, address, fetchConfig);
}
