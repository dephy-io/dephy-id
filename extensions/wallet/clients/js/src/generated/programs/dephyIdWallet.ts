/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { containsBytes, getU8Encoder, type Address } from '@solana/web3.js';
import {
  type ParsedCreateInstruction,
  type ParsedProxyCallInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const DEPHY_ID_WALLET_PROGRAM_ADDRESS =
  'ByEcTPnXHBCCWX73noBvYRrdTPBjXzm9DRE4nB8aQYgm' as Address<'ByEcTPnXHBCCWX73noBvYRrdTPBjXzm9DRE4nB8aQYgm'>;

export enum DephyIdWalletAccount {
  Wallet,
}

export function identifyDephyIdWalletAccount(
  account: { data: Uint8Array } | Uint8Array
): DephyIdWalletAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (containsBytes(data, getKeyEncoder().encode(Key.Wallet), 0)) {
    return DephyIdWalletAccount.Wallet;
  }
  throw new Error(
    'The provided account could not be identified as a dephyIdWallet account.'
  );
}

export enum DephyIdWalletInstruction {
  Create,
  ProxyCall,
}

export function identifyDephyIdWalletInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): DephyIdWalletInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return DephyIdWalletInstruction.Create;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return DephyIdWalletInstruction.ProxyCall;
  }
  throw new Error(
    'The provided instruction could not be identified as a dephyIdWallet instruction.'
  );
}

export type ParsedDephyIdWalletInstruction<
  TProgram extends string = 'ByEcTPnXHBCCWX73noBvYRrdTPBjXzm9DRE4nB8aQYgm',
> =
  | ({
      instructionType: DephyIdWalletInstruction.Create;
    } & ParsedCreateInstruction<TProgram>)
  | ({
      instructionType: DephyIdWalletInstruction.ProxyCall;
    } & ParsedProxyCallInstruction<TProgram>);
