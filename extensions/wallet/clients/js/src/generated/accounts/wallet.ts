/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { WalletSeeds, findWalletPda } from '../pdas';
import { Key, getKeyDecoder, getKeyEncoder } from '../types';

export type Wallet = {
  key: Key;
  authority: Address;
  device: Address;
  vault: Address;
  vaultBump: number;
};

export type WalletArgs = {
  authority: Address;
  device: Address;
  vault: Address;
  vaultBump: number;
};

export function getWalletEncoder(): Encoder<WalletArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['authority', getAddressEncoder()],
      ['device', getAddressEncoder()],
      ['vault', getAddressEncoder()],
      ['vaultBump', getU8Encoder()],
    ]),
    (value) => ({ ...value, key: Key.Wallet })
  );
}

export function getWalletDecoder(): Decoder<Wallet> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['device', getAddressDecoder()],
    ['vault', getAddressDecoder()],
    ['vaultBump', getU8Decoder()],
  ]);
}

export function getWalletCodec(): Codec<WalletArgs, Wallet> {
  return combineCodec(getWalletEncoder(), getWalletDecoder());
}

export function decodeWallet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Wallet, TAddress>;
export function decodeWallet<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Wallet, TAddress>;
export function decodeWallet<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Wallet, TAddress> | MaybeAccount<Wallet, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getWalletDecoder()
  );
}

export async function fetchWallet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Wallet, TAddress>> {
  const maybeAccount = await fetchMaybeWallet(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWallet<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Wallet, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeWallet(maybeAccount);
}

export async function fetchAllWallet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Wallet>[]> {
  const maybeAccounts = await fetchAllMaybeWallet(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeWallet(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Wallet>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeWallet(maybeAccount));
}

export function getWalletSize(): number {
  return 98;
}

export async function fetchWalletFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WalletSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<Wallet>> {
  const maybeAccount = await fetchMaybeWalletFromSeeds(rpc, seeds, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeWalletFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: WalletSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<Wallet>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findWalletPda(seeds, { programAddress });
  return await fetchMaybeWallet(rpc, address, fetchConfig);
}
