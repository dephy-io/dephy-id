/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
} from '@solana/web3.js';
import { findVaultPda } from '../pdas';
import { DEPHY_ID_WALLET_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export type ProxyCallInstruction<
  TProgram extends string = typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
  TAccountWallet extends string | IAccountMeta<string> = string,
  TAccountAuthority extends string | IAccountMeta<string> = string,
  TAccountVault extends string | IAccountMeta<string> = string,
  TAccountTargetProgram extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountWallet extends string
        ? ReadonlyAccount<TAccountWallet>
        : TAccountWallet,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            IAccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountVault extends string
        ? ReadonlyAccount<TAccountVault>
        : TAccountVault,
      TAccountTargetProgram extends string
        ? ReadonlyAccount<TAccountTargetProgram>
        : TAccountTargetProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ProxyCallInstructionData = {
  discriminator: number;
  ixData: ReadonlyUint8Array;
};

export type ProxyCallInstructionDataArgs = { ixData: ReadonlyUint8Array };

export function getProxyCallInstructionDataEncoder(): Encoder<ProxyCallInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['ixData', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  );
}

export function getProxyCallInstructionDataDecoder(): Decoder<ProxyCallInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['ixData', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getProxyCallInstructionDataCodec(): Codec<
  ProxyCallInstructionDataArgs,
  ProxyCallInstructionData
> {
  return combineCodec(
    getProxyCallInstructionDataEncoder(),
    getProxyCallInstructionDataDecoder()
  );
}

export type ProxyCallAsyncInput<
  TAccountWallet extends string = string,
  TAccountAuthority extends string = string,
  TAccountVault extends string = string,
  TAccountTargetProgram extends string = string,
> = {
  /** The program derived address of the wallet account to increment (seeds: ['WALLET', authority]) */
  wallet: Address<TAccountWallet>;
  /** The authority of the wallet */
  authority: TransactionSigner<TAccountAuthority>;
  /** The wallet vault (seeds: ['VAULT', wallet]) */
  vault?: Address<TAccountVault>;
  /** The proxy called program */
  targetProgram: Address<TAccountTargetProgram>;
  ixData: ProxyCallInstructionDataArgs['ixData'];
};

export async function getProxyCallInstructionAsync<
  TAccountWallet extends string,
  TAccountAuthority extends string,
  TAccountVault extends string,
  TAccountTargetProgram extends string,
>(
  input: ProxyCallAsyncInput<
    TAccountWallet,
    TAccountAuthority,
    TAccountVault,
    TAccountTargetProgram
  >
): Promise<
  ProxyCallInstruction<
    typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
    TAccountWallet,
    TAccountAuthority,
    TAccountVault,
    TAccountTargetProgram
  >
> {
  // Program address.
  const programAddress = DEPHY_ID_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    wallet: { value: input.wallet ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    targetProgram: { value: input.targetProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.vault.value) {
    accounts.vault.value = await findVaultPda({
      wallet: expectAddress(accounts.wallet.value),
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.wallet),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.targetProgram),
    ],
    programAddress,
    data: getProxyCallInstructionDataEncoder().encode(
      args as ProxyCallInstructionDataArgs
    ),
  } as ProxyCallInstruction<
    typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
    TAccountWallet,
    TAccountAuthority,
    TAccountVault,
    TAccountTargetProgram
  >;

  return instruction;
}

export type ProxyCallInput<
  TAccountWallet extends string = string,
  TAccountAuthority extends string = string,
  TAccountVault extends string = string,
  TAccountTargetProgram extends string = string,
> = {
  /** The program derived address of the wallet account to increment (seeds: ['WALLET', authority]) */
  wallet: Address<TAccountWallet>;
  /** The authority of the wallet */
  authority: TransactionSigner<TAccountAuthority>;
  /** The wallet vault (seeds: ['VAULT', wallet]) */
  vault: Address<TAccountVault>;
  /** The proxy called program */
  targetProgram: Address<TAccountTargetProgram>;
  ixData: ProxyCallInstructionDataArgs['ixData'];
};

export function getProxyCallInstruction<
  TAccountWallet extends string,
  TAccountAuthority extends string,
  TAccountVault extends string,
  TAccountTargetProgram extends string,
>(
  input: ProxyCallInput<
    TAccountWallet,
    TAccountAuthority,
    TAccountVault,
    TAccountTargetProgram
  >
): ProxyCallInstruction<
  typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
  TAccountWallet,
  TAccountAuthority,
  TAccountVault,
  TAccountTargetProgram
> {
  // Program address.
  const programAddress = DEPHY_ID_WALLET_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    wallet: { value: input.wallet ?? null, isWritable: false },
    authority: { value: input.authority ?? null, isWritable: false },
    vault: { value: input.vault ?? null, isWritable: false },
    targetProgram: { value: input.targetProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.wallet),
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.vault),
      getAccountMeta(accounts.targetProgram),
    ],
    programAddress,
    data: getProxyCallInstructionDataEncoder().encode(
      args as ProxyCallInstructionDataArgs
    ),
  } as ProxyCallInstruction<
    typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
    TAccountWallet,
    TAccountAuthority,
    TAccountVault,
    TAccountTargetProgram
  >;

  return instruction;
}

export type ParsedProxyCallInstruction<
  TProgram extends string = typeof DEPHY_ID_WALLET_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The program derived address of the wallet account to increment (seeds: ['WALLET', authority]) */
    wallet: TAccountMetas[0];
    /** The authority of the wallet */
    authority: TAccountMetas[1];
    /** The wallet vault (seeds: ['VAULT', wallet]) */
    vault: TAccountMetas[2];
    /** The proxy called program */
    targetProgram: TAccountMetas[3];
  };
  data: ProxyCallInstructionData;
};

export function parseProxyCallInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedProxyCallInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      wallet: getNextAccount(),
      authority: getNextAccount(),
      vault: getNextAccount(),
      targetProgram: getNextAccount(),
    },
    data: getProxyCallInstructionDataDecoder().decode(instruction.data),
  };
}
