// GENERATED by @edgedb/generate v0.5.3

import type {Executor} from "edgedb";

export type GetProductArgs = {
  readonly "mint_account": string;
  readonly "offset": number;
  readonly "limit": number;
};

export type GetProductReturns = {
  "mint_account": string;
  "mint_authority": string | null;
  "devices_count": number;
  "devices": Array<{
    "id": string;
    "pubkey": string;
    "signing_alg": ("Ed25519" | "Secp256k1") | null;
    "token_account": string;
    "block_ts": Date | null;
    "did": {
      "token_account": string | null;
      "mint_account": string;
      "owner": {
        "pubkey": string;
      } | null;
      "metadata": {
        "name": string | null;
        "symbol": string | null;
        "uri": string | null;
        "additional": Array<[string, string]>;
      } | null;
    } | null;
  }>;
  "metadata": {
    "name": string | null;
    "additional": Array<[string, string]>;
    "symbol": string | null;
    "uri": string | null;
  } | null;
  "vendor": {
    "pubkey": string;
  };
} | null;

export function getProduct(client: Executor, args: GetProductArgs): Promise<GetProductReturns> {
  return client.querySingle(`\
select default::Product {
  mint_account,
  mint_authority,
  devices_count := count(.devices),
  devices: {
    id,
    pubkey,
    signing_alg,
    token_account,
    block_ts := .tx.block_ts,
    did: {
      token_account,
      mint_account,
      owner: {
        pubkey
      },
      metadata: {
        name,
        symbol,
        uri,
        additional
      }
    }
  }
  order by .tx.slot then .tx@ix_index
  offset <int64>$offset
  limit <int64>$limit,
  metadata: {
    name,
    additional,
    symbol,
    uri
  },
  vendor: {
    pubkey
  }
}
filter .mint_account = <str>$mint_account`, args);

}
