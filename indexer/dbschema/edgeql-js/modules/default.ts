// GENERATED by @edgedb/generate v0.5.3

import * as $ from "../reflection";
import * as _ from "../imports";
import type * as _std from "./std";
export type $DeviceSigningAlgorithm = {
  "Ed25519": $.$expr_Literal<$DeviceSigningAlgorithm>;
  "Secp256k1": $.$expr_Literal<$DeviceSigningAlgorithm>;
} & $.EnumType<"default::DeviceSigningAlgorithm", ["Ed25519", "Secp256k1"]>;
const DeviceSigningAlgorithm: $DeviceSigningAlgorithm = $.makeType<$DeviceSigningAlgorithm>(_.spec, "ae434a3c-1842-11ef-9f20-dfb2a13ed6dd", _.syntax.literal);

export type $SolanaAccountλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "pubkey": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
}>;
type $SolanaAccount = $.ObjectType<"default::SolanaAccount", $SolanaAccountλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {pubkey: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $SolanaAccount = $.makeType<$SolanaAccount>(_.spec, "ae39b3e6-1842-11ef-841a-eb48747fa740", _.syntax.literal);

const SolanaAccount: $.$expr_PathNode<$.TypeSet<$SolanaAccount, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SolanaAccount, $.Cardinality.Many), null);

export type $AdminλShape = $.typeutil.flatten<$SolanaAccountλShape & {
  "<authority[is Program]": $.LinkDesc<$Program, $.Cardinality.Many, {}, false, false,  false, false>;
  "<authority": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Admin = $.ObjectType<"default::Admin", $AdminλShape, null, [
  ...$SolanaAccount['__exclusives__'],
]>;
const $Admin = $.makeType<$Admin>(_.spec, "ae3aabe8-1842-11ef-9c61-976d7ef8e953", _.syntax.literal);

const Admin: $.$expr_PathNode<$.TypeSet<$Admin, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Admin, $.Cardinality.Many), null);

export type $SplMintλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "metadata": $.LinkDesc<$TokenMetadata, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "mint_account": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "mint_authority": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
}>;
type $SplMint = $.ObjectType<"default::SplMint", $SplMintλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {mint_account: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $SplMint = $.makeType<$SplMint>(_.spec, "ae40382e-1842-11ef-acc0-7b88be3b1580", _.syntax.literal);

const SplMint: $.$expr_PathNode<$.TypeSet<$SplMint, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SplMint, $.Cardinality.Many), null);

export type $SplAccountλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "token_account": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, true, false, false, false>;
}>;
type $SplAccount = $.ObjectType<"default::SplAccount", $SplAccountλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {token_account: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $SplAccount = $.makeType<$SplAccount>(_.spec, "ae3f47ac-1842-11ef-a522-732a7a81f16f", _.syntax.literal);

const SplAccount: $.$expr_PathNode<$.TypeSet<$SplAccount, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($SplAccount, $.Cardinality.Many), null);

export type $WithIxλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "tx": $.LinkDesc<$Transaction, $.Cardinality.One, {
    "@ix_index": $.PropertyDesc<_std.$int16, $.Cardinality.AtMostOne>;
  }, false, false, false, false>;
}>;
type $WithIx = $.ObjectType<"default::WithIx", $WithIxλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $WithIx = $.makeType<$WithIx>(_.spec, "ae3cf7b8-1842-11ef-b490-bf98e6ac3ddd", _.syntax.literal);

const WithIx: $.$expr_PathNode<$.TypeSet<$WithIx, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($WithIx, $.Cardinality.Many), null);

export type $DIDλShape = $.typeutil.flatten<$SplMintλShape & $SplAccountλShape & $WithIxλShape & {
  "device": $.LinkDesc<$Device, $.Cardinality.One, {}, true, false,  false, false>;
  "owner": $.LinkDesc<$User, $.Cardinality.AtMostOne, {}, false, false,  false, false>;
  "<did[is Device]": $.LinkDesc<$Device, $.Cardinality.Many, {}, false, false,  false, false>;
  "<dids[is User]": $.LinkDesc<$User, $.Cardinality.Many, {}, false, false,  false, false>;
  "<did": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<dids": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $DID = $.ObjectType<"default::DID", $DIDλShape, null, [
  ...$SplMint['__exclusives__'],
  ...$SplAccount['__exclusives__'],
  ...$WithIx['__exclusives__'],
  {device: {__element__: $Device, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $DID = $.makeType<$DID>(_.spec, "ae4169ec-1842-11ef-9d60-6d689606aea9", _.syntax.literal);

const DID: $.$expr_PathNode<$.TypeSet<$DID, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($DID, $.Cardinality.Many), null);

export type $DeviceλShape = $.typeutil.flatten<$SolanaAccountλShape & Omit<$SplAccountλShape, "token_account"> & $WithIxλShape & {
  "signing_alg": $.PropertyDesc<$DeviceSigningAlgorithm, $.Cardinality.One, false, false, false, false>;
  "token_account": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "did": $.LinkDesc<$DID, $.Cardinality.AtMostOne, {}, false, true,  false, false>;
  "product": $.LinkDesc<$Product, $.Cardinality.One, {}, false, false,  false, false>;
  "<device[is DID]": $.LinkDesc<$DID, $.Cardinality.AtMostOne, {}, true, false,  false, false>;
  "<devices[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<device": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<devices": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Device = $.ObjectType<"default::Device", $DeviceλShape, null, [
  ...$SolanaAccount['__exclusives__'],
  ...$SplAccount['__exclusives__'],
  ...$WithIx['__exclusives__'],
  {token_account: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Device = $.makeType<$Device>(_.spec, "ae435694-1842-11ef-9260-992ac56e3626", _.syntax.literal);

const Device: $.$expr_PathNode<$.TypeSet<$Device, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Device, $.Cardinality.Many), null);

export type $ProductλShape = $.typeutil.flatten<$SplMintλShape & $WithIxλShape & {
  "devices": $.LinkDesc<$Device, $.Cardinality.Many, {}, false, true,  false, false>;
  "vendor": $.LinkDesc<$Vendor, $.Cardinality.One, {}, false, false,  false, false>;
  "<product[is Device]": $.LinkDesc<$Device, $.Cardinality.Many, {}, false, false,  false, false>;
  "<products[is Vendor]": $.LinkDesc<$Vendor, $.Cardinality.Many, {}, false, false,  false, false>;
  "<product": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
  "<products": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Product = $.ObjectType<"default::Product", $ProductλShape, null, [
  ...$SplMint['__exclusives__'],
  ...$WithIx['__exclusives__'],
]>;
const $Product = $.makeType<$Product>(_.spec, "ae481058-1842-11ef-a971-0794f5e002ab", _.syntax.literal);

const Product: $.$expr_PathNode<$.TypeSet<$Product, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Product, $.Cardinality.Many), null);

export type $ProgramλShape = $.typeutil.flatten<$SolanaAccountλShape & $WithIxλShape & {
  "authority": $.LinkDesc<$Admin, $.Cardinality.One, {}, false, false,  false, false>;
}>;
type $Program = $.ObjectType<"default::Program", $ProgramλShape, null, [
  ...$SolanaAccount['__exclusives__'],
  ...$WithIx['__exclusives__'],
]>;
const $Program = $.makeType<$Program>(_.spec, "ae3dcea4-1842-11ef-813b-4def551ccf1b", _.syntax.literal);

const Program: $.$expr_PathNode<$.TypeSet<$Program, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Program, $.Cardinality.Many), null);

export type $TokenMetadataλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "additional": $.PropertyDesc<$.ArrayType<$.TupleType<[_std.$str, _std.$str]>>, $.Cardinality.One, false, false, false, false>;
  "name": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "symbol": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "uri": $.PropertyDesc<_std.$str, $.Cardinality.One, false, false, false, false>;
  "<metadata[is SplMint]": $.LinkDesc<$SplMint, $.Cardinality.Many, {}, false, false,  false, false>;
  "<metadata[is DID]": $.LinkDesc<$DID, $.Cardinality.Many, {}, false, false,  false, false>;
  "<metadata[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<metadata[is Vendor]": $.LinkDesc<$Vendor, $.Cardinality.Many, {}, false, false,  false, false>;
  "<metadata": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $TokenMetadata = $.ObjectType<"default::TokenMetadata", $TokenMetadataλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
]>;
const $TokenMetadata = $.makeType<$TokenMetadata>(_.spec, "ae38a334-1842-11ef-b4e6-b7e7c96e2aa3", _.syntax.literal);

const TokenMetadata: $.$expr_PathNode<$.TypeSet<$TokenMetadata, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($TokenMetadata, $.Cardinality.Many), null);

export type $TransactionλShape = $.typeutil.flatten<_std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588λShape & {
  "block_ts": $.PropertyDesc<_std.$datetime, $.Cardinality.AtMostOne, false, false, false, false>;
  "err": $.PropertyDesc<_std.$str, $.Cardinality.AtMostOne, false, false, false, false>;
  "processed": $.PropertyDesc<_std.$bool, $.Cardinality.One, false, false, false, true>;
  "signature": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "slot": $.PropertyDesc<_std.$bigint, $.Cardinality.One, false, false, false, false>;
  "<tx[is WithIx]": $.LinkDesc<$WithIx, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx[is Program]": $.LinkDesc<$Program, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx[is DID]": $.LinkDesc<$DID, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx[is Device]": $.LinkDesc<$Device, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx[is Vendor]": $.LinkDesc<$Vendor, $.Cardinality.Many, {}, false, false,  false, false>;
  "<tx": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Transaction = $.ObjectType<"default::Transaction", $TransactionλShape, null, [
  ..._std.$Object_8ce8c71ee4fa5f73840c22d7eaa58588['__exclusives__'],
  {signature: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Transaction = $.makeType<$Transaction>(_.spec, "ae3bb36c-1842-11ef-bf92-f5bafd4692b9", _.syntax.literal);

const Transaction: $.$expr_PathNode<$.TypeSet<$Transaction, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Transaction, $.Cardinality.Many), null);

export type $UserλShape = $.typeutil.flatten<$SolanaAccountλShape & {
  "dids": $.LinkDesc<$DID, $.Cardinality.Many, {}, false, true,  false, false>;
  "<owner[is DID]": $.LinkDesc<$DID, $.Cardinality.Many, {}, false, false,  false, false>;
  "<owner": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $User = $.ObjectType<"default::User", $UserλShape, null, [
  ...$SolanaAccount['__exclusives__'],
]>;
const $User = $.makeType<$User>(_.spec, "ae463e54-1842-11ef-953c-c1e04eb5016d", _.syntax.literal);

const User: $.$expr_PathNode<$.TypeSet<$User, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($User, $.Cardinality.Many), null);

export type $VendorλShape = $.typeutil.flatten<$SolanaAccountλShape & $SplMintλShape & Omit<$SplAccountλShape, "token_account"> & $WithIxλShape & {
  "token_account": $.PropertyDesc<_std.$str, $.Cardinality.One, true, false, false, false>;
  "products": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, true,  false, false>;
  "<vendor[is Product]": $.LinkDesc<$Product, $.Cardinality.Many, {}, false, false,  false, false>;
  "<vendor": $.LinkDesc<$.ObjectType, $.Cardinality.Many, {}, false, false,  false, false>;
}>;
type $Vendor = $.ObjectType<"default::Vendor", $VendorλShape, null, [
  ...$SolanaAccount['__exclusives__'],
  ...$SplMint['__exclusives__'],
  ...$SplAccount['__exclusives__'],
  ...$WithIx['__exclusives__'],
  {token_account: {__element__: _std.$str, __cardinality__: $.Cardinality.One | $.Cardinality.AtMostOne },},
]>;
const $Vendor = $.makeType<$Vendor>(_.spec, "ae4a65ba-1842-11ef-a9f2-7d5d9b521c55", _.syntax.literal);

const Vendor: $.$expr_PathNode<$.TypeSet<$Vendor, $.Cardinality.Many>, null> = _.syntax.$PathNode($.$toSet($Vendor, $.Cardinality.Many), null);



export { DeviceSigningAlgorithm, $SolanaAccount, SolanaAccount, $Admin, Admin, $SplMint, SplMint, $SplAccount, SplAccount, $WithIx, WithIx, $DID, DID, $Device, Device, $Product, Product, $Program, Program, $TokenMetadata, TokenMetadata, $Transaction, Transaction, $User, User, $Vendor, Vendor };

type __defaultExports = {
  "DeviceSigningAlgorithm": typeof DeviceSigningAlgorithm;
  "SolanaAccount": typeof SolanaAccount;
  "Admin": typeof Admin;
  "SplMint": typeof SplMint;
  "SplAccount": typeof SplAccount;
  "WithIx": typeof WithIx;
  "DID": typeof DID;
  "Device": typeof Device;
  "Product": typeof Product;
  "Program": typeof Program;
  "TokenMetadata": typeof TokenMetadata;
  "Transaction": typeof Transaction;
  "User": typeof User;
  "Vendor": typeof Vendor
};
const __defaultExports: __defaultExports = {
  "DeviceSigningAlgorithm": DeviceSigningAlgorithm,
  "SolanaAccount": SolanaAccount,
  "Admin": Admin,
  "SplMint": SplMint,
  "SplAccount": SplAccount,
  "WithIx": WithIx,
  "DID": DID,
  "Device": Device,
  "Product": Product,
  "Program": Program,
  "TokenMetadata": TokenMetadata,
  "Transaction": Transaction,
  "User": User,
  "Vendor": Vendor
};
export default __defaultExports;
