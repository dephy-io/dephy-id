/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { Address, containsBytes, getU8Encoder } from '@solana/web3.js';
import {
  ParsedLinkInstruction,
  ParsedPublishInstruction,
  ParsedSubscribeInstruction,
} from '../instructions';

export const KWIL_PROGRAM_ADDRESS =
  '7TPUtQM5UNdMSEPEgGEY5HpLJZhK9tbK4SG4wmTcSkKn' as Address<'7TPUtQM5UNdMSEPEgGEY5HpLJZhK9tbK4SG4wmTcSkKn'>;

export enum KwilAccount {
  PublisherAccount,
  LinkedAccount,
  SubscriberAccount,
}

export enum KwilInstruction {
  Publish,
  Link,
  Subscribe,
}

export function identifyKwilInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): KwilInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return KwilInstruction.Publish;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return KwilInstruction.Link;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return KwilInstruction.Subscribe;
  }
  throw new Error(
    'The provided instruction could not be identified as a kwil instruction.'
  );
}

export type ParsedKwilInstruction<
  TProgram extends string = '7TPUtQM5UNdMSEPEgGEY5HpLJZhK9tbK4SG4wmTcSkKn',
> =
  | ({
      instructionType: KwilInstruction.Publish;
    } & ParsedPublishInstruction<TProgram>)
  | ({
      instructionType: KwilInstruction.Link;
    } & ParsedLinkInstruction<TProgram>)
  | ({
      instructionType: KwilInstruction.Subscribe;
    } & ParsedSubscribeInstruction<TProgram>);
