/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Address,
  Codec,
  Decoder,
  Encoder,
  IAccountMeta,
  IAccountSignerMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlyAccount,
  ReadonlySignerAccount,
  TransactionSigner,
  WritableAccount,
  WritableSignerAccount,
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
} from '@solana/web3.js';
import { KWIL_PROGRAM_ADDRESS } from '../programs';
import { ResolvedAccount, getAccountMetaFactory } from '../shared';

export type SubscribeInstruction<
  TProgram extends string = typeof KWIL_PROGRAM_ADDRESS,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountDephyProgram extends string | IAccountMeta<string> = string,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountUser extends string | IAccountMeta<string> = string,
  TAccountPublisher extends string | IAccountMeta<string> = string,
  TAccountLinked extends string | IAccountMeta<string> = string,
  TAccountSubscriber extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountDephyProgram extends string
        ? ReadonlyAccount<TAccountDephyProgram>
        : TAccountDephyProgram,
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountUser extends string
        ? ReadonlySignerAccount<TAccountUser> & IAccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountPublisher extends string
        ? ReadonlyAccount<TAccountPublisher>
        : TAccountPublisher,
      TAccountLinked extends string
        ? ReadonlyAccount<TAccountLinked>
        : TAccountLinked,
      TAccountSubscriber extends string
        ? WritableAccount<TAccountSubscriber>
        : TAccountSubscriber,
      ...TRemainingAccounts,
    ]
  >;

export type SubscribeInstructionData = { discriminator: number; bump: number };

export type SubscribeInstructionDataArgs = { bump: number };

export function getSubscribeInstructionDataEncoder(): Encoder<SubscribeInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 })
  );
}

export function getSubscribeInstructionDataDecoder(): Decoder<SubscribeInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getSubscribeInstructionDataCodec(): Codec<
  SubscribeInstructionDataArgs,
  SubscribeInstructionData
> {
  return combineCodec(
    getSubscribeInstructionDataEncoder(),
    getSubscribeInstructionDataDecoder()
  );
}

export type SubscribeInput<
  TAccountSystemProgram extends string = string,
  TAccountDephyProgram extends string = string,
  TAccountPayer extends string = string,
  TAccountUser extends string = string,
  TAccountPublisher extends string = string,
  TAccountLinked extends string = string,
  TAccountSubscriber extends string = string,
> = {
  /** The system program */
  systemProgram?: Address<TAccountSystemProgram>;
  /** The DePHY program */
  dephyProgram: Address<TAccountDephyProgram>;
  /** The account paying for the storage fees */
  payer: TransactionSigner<TAccountPayer>;
  /** The Registered user */
  user: TransactionSigner<TAccountUser>;
  /** The Publisher account */
  publisher: Address<TAccountPublisher>;
  /** The Linked account */
  linked: Address<TAccountLinked>;
  /** The Subscriber account */
  subscriber: Address<TAccountSubscriber>;
  bump: SubscribeInstructionDataArgs['bump'];
};

export function getSubscribeInstruction<
  TAccountSystemProgram extends string,
  TAccountDephyProgram extends string,
  TAccountPayer extends string,
  TAccountUser extends string,
  TAccountPublisher extends string,
  TAccountLinked extends string,
  TAccountSubscriber extends string,
>(
  input: SubscribeInput<
    TAccountSystemProgram,
    TAccountDephyProgram,
    TAccountPayer,
    TAccountUser,
    TAccountPublisher,
    TAccountLinked,
    TAccountSubscriber
  >
): SubscribeInstruction<
  typeof KWIL_PROGRAM_ADDRESS,
  TAccountSystemProgram,
  TAccountDephyProgram,
  TAccountPayer,
  TAccountUser,
  TAccountPublisher,
  TAccountLinked,
  TAccountSubscriber
> {
  // Program address.
  const programAddress = KWIL_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    dephyProgram: { value: input.dephyProgram ?? null, isWritable: false },
    payer: { value: input.payer ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: false },
    publisher: { value: input.publisher ?? null, isWritable: false },
    linked: { value: input.linked ?? null, isWritable: false },
    subscriber: { value: input.subscriber ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.dephyProgram),
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.publisher),
      getAccountMeta(accounts.linked),
      getAccountMeta(accounts.subscriber),
    ],
    programAddress,
    data: getSubscribeInstructionDataEncoder().encode(
      args as SubscribeInstructionDataArgs
    ),
  } as SubscribeInstruction<
    typeof KWIL_PROGRAM_ADDRESS,
    TAccountSystemProgram,
    TAccountDephyProgram,
    TAccountPayer,
    TAccountUser,
    TAccountPublisher,
    TAccountLinked,
    TAccountSubscriber
  >;

  return instruction;
}

export type ParsedSubscribeInstruction<
  TProgram extends string = typeof KWIL_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The system program */
    systemProgram: TAccountMetas[0];
    /** The DePHY program */
    dephyProgram: TAccountMetas[1];
    /** The account paying for the storage fees */
    payer: TAccountMetas[2];
    /** The Registered user */
    user: TAccountMetas[3];
    /** The Publisher account */
    publisher: TAccountMetas[4];
    /** The Linked account */
    linked: TAccountMetas[5];
    /** The Subscriber account */
    subscriber: TAccountMetas[6];
  };
  data: SubscribeInstructionData;
};

export function parseSubscribeInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSubscribeInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      systemProgram: getNextAccount(),
      dephyProgram: getNextAccount(),
      payer: getNextAccount(),
      user: getNextAccount(),
      publisher: getNextAccount(),
      linked: getNextAccount(),
      subscriber: getNextAccount(),
    },
    data: getSubscribeInstructionDataDecoder().decode(instruction.data),
  };
}
