/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/web3.js';
import { LinkedAccountSeeds, findLinkedAccountPda } from '../pdas';
import {
  Key,
  KeyArgs,
  LinkedData,
  LinkedDataArgs,
  getKeyDecoder,
  getKeyEncoder,
  getLinkedDataDecoder,
  getLinkedDataEncoder,
} from '../types';

export type LinkedAccount = { key: Key; authority: Address; data: LinkedData };

export type LinkedAccountArgs = {
  key: KeyArgs;
  authority: Address;
  data: LinkedDataArgs;
};

export function getLinkedAccountEncoder(): Encoder<LinkedAccountArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['data', getLinkedDataEncoder()],
  ]);
}

export function getLinkedAccountDecoder(): Decoder<LinkedAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getLinkedDataDecoder()],
  ]);
}

export function getLinkedAccountCodec(): Codec<
  LinkedAccountArgs,
  LinkedAccount
> {
  return combineCodec(getLinkedAccountEncoder(), getLinkedAccountDecoder());
}

export function decodeLinkedAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<LinkedAccount, TAddress>;
export function decodeLinkedAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<LinkedAccount, TAddress>;
export function decodeLinkedAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<LinkedAccount, TAddress> | MaybeAccount<LinkedAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getLinkedAccountDecoder()
  );
}

export async function fetchLinkedAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<LinkedAccount, TAddress>> {
  const maybeAccount = await fetchMaybeLinkedAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLinkedAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<LinkedAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeLinkedAccount(maybeAccount);
}

export async function fetchAllLinkedAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<LinkedAccount>[]> {
  const maybeAccounts = await fetchAllMaybeLinkedAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeLinkedAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<LinkedAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeLinkedAccount(maybeAccount));
}

export function getLinkedAccountSize(): number {
  return 54;
}

export async function fetchLinkedAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: LinkedAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<LinkedAccount>> {
  const maybeAccount = await fetchMaybeLinkedAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeLinkedAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: LinkedAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<LinkedAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findLinkedAccountPda(seeds, { programAddress });
  return await fetchMaybeLinkedAccount(rpc, address, fetchConfig);
}
