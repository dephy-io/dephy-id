/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/web3.js';
import { PublisherAccountSeeds, findPublisherAccountPda } from '../pdas';
import {
  Key,
  KeyArgs,
  PublisherData,
  PublisherDataArgs,
  getKeyDecoder,
  getKeyEncoder,
  getPublisherDataDecoder,
  getPublisherDataEncoder,
} from '../types';

export type PublisherAccount = {
  key: Key;
  authority: Address;
  data: PublisherData;
};

export type PublisherAccountArgs = {
  key: KeyArgs;
  authority: Address;
  data: PublisherDataArgs;
};

export function getPublisherAccountEncoder(): Encoder<PublisherAccountArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['data', getPublisherDataEncoder()],
  ]);
}

export function getPublisherAccountDecoder(): Decoder<PublisherAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getPublisherDataDecoder()],
  ]);
}

export function getPublisherAccountCodec(): Codec<
  PublisherAccountArgs,
  PublisherAccount
> {
  return combineCodec(
    getPublisherAccountEncoder(),
    getPublisherAccountDecoder()
  );
}

export function decodePublisherAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<PublisherAccount, TAddress>;
export function decodePublisherAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<PublisherAccount, TAddress>;
export function decodePublisherAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<PublisherAccount, TAddress>
  | MaybeAccount<PublisherAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPublisherAccountDecoder()
  );
}

export async function fetchPublisherAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<PublisherAccount, TAddress>> {
  const maybeAccount = await fetchMaybePublisherAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePublisherAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<PublisherAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePublisherAccount(maybeAccount);
}

export async function fetchAllPublisherAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<PublisherAccount>[]> {
  const maybeAccounts = await fetchAllMaybePublisherAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePublisherAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<PublisherAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodePublisherAccount(maybeAccount)
  );
}

export function getPublisherAccountSize(): number {
  return 54;
}

export async function fetchPublisherAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PublisherAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<PublisherAccount>> {
  const maybeAccount = await fetchMaybePublisherAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePublisherAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: PublisherAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<PublisherAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findPublisherAccountPda(seeds, { programAddress });
  return await fetchMaybePublisherAccount(rpc, address, fetchConfig);
}
