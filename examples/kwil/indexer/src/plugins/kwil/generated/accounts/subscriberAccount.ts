/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  Account,
  Address,
  Codec,
  Decoder,
  EncodedAccount,
  Encoder,
  FetchAccountConfig,
  FetchAccountsConfig,
  MaybeAccount,
  MaybeEncodedAccount,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
} from '@solana/web3.js';
import { SubscriberAccountSeeds, findSubscriberAccountPda } from '../pdas';
import {
  Key,
  KeyArgs,
  SubscriberData,
  SubscriberDataArgs,
  getKeyDecoder,
  getKeyEncoder,
  getSubscriberDataDecoder,
  getSubscriberDataEncoder,
} from '../types';

export type SubscriberAccount = {
  key: Key;
  authority: Address;
  data: SubscriberData;
};

export type SubscriberAccountArgs = {
  key: KeyArgs;
  authority: Address;
  data: SubscriberDataArgs;
};

export function getSubscriberAccountEncoder(): Encoder<SubscriberAccountArgs> {
  return getStructEncoder([
    ['key', getKeyEncoder()],
    ['authority', getAddressEncoder()],
    ['data', getSubscriberDataEncoder()],
  ]);
}

export function getSubscriberAccountDecoder(): Decoder<SubscriberAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['data', getSubscriberDataDecoder()],
  ]);
}

export function getSubscriberAccountCodec(): Codec<
  SubscriberAccountArgs,
  SubscriberAccount
> {
  return combineCodec(
    getSubscriberAccountEncoder(),
    getSubscriberAccountDecoder()
  );
}

export function decodeSubscriberAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SubscriberAccount, TAddress>;
export function decodeSubscriberAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SubscriberAccount, TAddress>;
export function decodeSubscriberAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<SubscriberAccount, TAddress>
  | MaybeAccount<SubscriberAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSubscriberAccountDecoder()
  );
}

export async function fetchSubscriberAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SubscriberAccount, TAddress>> {
  const maybeAccount = await fetchMaybeSubscriberAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSubscriberAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SubscriberAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSubscriberAccount(maybeAccount);
}

export async function fetchAllSubscriberAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SubscriberAccount>[]> {
  const maybeAccounts = await fetchAllMaybeSubscriberAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSubscriberAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SubscriberAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSubscriberAccount(maybeAccount)
  );
}

export function getSubscriberAccountSize(): number {
  return 98;
}

export async function fetchSubscriberAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: SubscriberAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<SubscriberAccount>> {
  const maybeAccount = await fetchMaybeSubscriberAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSubscriberAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: SubscriberAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<SubscriberAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findSubscriberAccountPda(seeds, { programAddress });
  return await fetchMaybeSubscriberAccount(rpc, address, fetchConfig);
}
