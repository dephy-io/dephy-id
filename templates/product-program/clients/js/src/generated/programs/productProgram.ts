/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import { containsBytes, getU8Encoder, type Address } from '@solana/web3.js';
import {
  type ParsedCreateVirtualDeviceInstruction,
  type ParsedInitInstruction,
} from '../instructions';
import { Key, getKeyEncoder } from '../types';

export const PRODUCT_PROGRAM_PROGRAM_ADDRESS =
  '8QFRWuQBMgkGrQFQAbHBRhXVw8BUGBLK5FJ4jiJWuu8G' as Address<'8QFRWuQBMgkGrQFQAbHBRhXVw8BUGBLK5FJ4jiJWuu8G'>;

export enum ProductProgramAccount {
  ProgramAccount,
}

export function identifyProductProgramAccount(
  account: { data: Uint8Array } | Uint8Array
): ProductProgramAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (containsBytes(data, getKeyEncoder().encode(Key.ProgramAccount), 0)) {
    return ProductProgramAccount.ProgramAccount;
  }
  throw new Error(
    'The provided account could not be identified as a productProgram account.'
  );
}

export enum ProductProgramInstruction {
  Init,
  CreateVirtualDevice,
}

export function identifyProductProgramInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): ProductProgramInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return ProductProgramInstruction.Init;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return ProductProgramInstruction.CreateVirtualDevice;
  }
  throw new Error(
    'The provided instruction could not be identified as a productProgram instruction.'
  );
}

export type ParsedProductProgramInstruction<
  TProgram extends string = '8QFRWuQBMgkGrQFQAbHBRhXVw8BUGBLK5FJ4jiJWuu8G',
> =
  | ({
      instructionType: ProductProgramInstruction.Init;
    } & ParsedInitInstruction<TProgram>)
  | ({
      instructionType: ProductProgramInstruction.CreateVirtualDevice;
    } & ParsedCreateVirtualDeviceInstruction<TProgram>);
