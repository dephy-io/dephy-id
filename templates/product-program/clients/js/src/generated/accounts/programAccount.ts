/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/kinobi-so/kinobi
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
} from '@solana/web3.js';
import { ProgramAccountSeeds, findProgramAccountPda } from '../pdas';
import { Key, getKeyDecoder, getKeyEncoder } from '../types';

export type ProgramAccount = {
  key: Key;
  authority: Address;
  productMint: Address;
};

export type ProgramAccountArgs = { authority: Address; productMint: Address };

export function getProgramAccountEncoder(): Encoder<ProgramAccountArgs> {
  return transformEncoder(
    getStructEncoder([
      ['key', getKeyEncoder()],
      ['authority', getAddressEncoder()],
      ['productMint', getAddressEncoder()],
    ]),
    (value) => ({ ...value, key: Key.ProgramAccount })
  );
}

export function getProgramAccountDecoder(): Decoder<ProgramAccount> {
  return getStructDecoder([
    ['key', getKeyDecoder()],
    ['authority', getAddressDecoder()],
    ['productMint', getAddressDecoder()],
  ]);
}

export function getProgramAccountCodec(): Codec<
  ProgramAccountArgs,
  ProgramAccount
> {
  return combineCodec(getProgramAccountEncoder(), getProgramAccountDecoder());
}

export function decodeProgramAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<ProgramAccount, TAddress>;
export function decodeProgramAccount<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<ProgramAccount, TAddress>;
export function decodeProgramAccount<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<ProgramAccount, TAddress> | MaybeAccount<ProgramAccount, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getProgramAccountDecoder()
  );
}

export async function fetchProgramAccount<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<ProgramAccount, TAddress>> {
  const maybeAccount = await fetchMaybeProgramAccount(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramAccount<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<ProgramAccount, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeProgramAccount(maybeAccount);
}

export async function fetchAllProgramAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<ProgramAccount>[]> {
  const maybeAccounts = await fetchAllMaybeProgramAccount(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeProgramAccount(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<ProgramAccount>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeProgramAccount(maybeAccount)
  );
}

export function getProgramAccountSize(): number {
  return 65;
}

export async function fetchProgramAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProgramAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<Account<ProgramAccount>> {
  const maybeAccount = await fetchMaybeProgramAccountFromSeeds(
    rpc,
    seeds,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeProgramAccountFromSeeds(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  seeds: ProgramAccountSeeds,
  config: FetchAccountConfig & { programAddress?: Address } = {}
): Promise<MaybeAccount<ProgramAccount>> {
  const { programAddress, ...fetchConfig } = config;
  const [address] = await findProgramAccountPda(seeds, { programAddress });
  return await fetchMaybeProgramAccount(rpc, address, fetchConfig);
}
